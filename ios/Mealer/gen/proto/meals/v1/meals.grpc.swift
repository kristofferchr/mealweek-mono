//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: proto/meals/v1/meals.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Meals_V1_MealsServiceClient`, then call methods of this protocol to make API calls.
internal protocol Meals_V1_MealsServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? { get }

  func getMeals(
    _ request: Meals_V1_GetMealsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse>

  func createMeal(
    _ request: Meals_V1_CreateMealRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse>

  func deleteMeal(
    _ request: Meals_V1_DeleteMealRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse>
}

extension Meals_V1_MealsServiceClientProtocol {
  internal var serviceName: String {
    return "meals.v1.MealsService"
  }

  /// Unary call to GetMeals
  ///
  /// - Parameters:
  ///   - request: Request to send to GetMeals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getMeals(
    _ request: Meals_V1_GetMealsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse> {
    return self.makeUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.getMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMealsInterceptors() ?? []
    )
  }

  /// Unary call to CreateMeal
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateMeal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createMeal(
    _ request: Meals_V1_CreateMealRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse> {
    return self.makeUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.createMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMealInterceptors() ?? []
    )
  }

  /// Unary call to DeleteMeal
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteMeal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteMeal(
    _ request: Meals_V1_DeleteMealRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse> {
    return self.makeUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.deleteMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMealInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Meals_V1_MealsServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Meals_V1_MealsServiceNIOClient")
internal final class Meals_V1_MealsServiceClient: Meals_V1_MealsServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the meals.v1.MealsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Meals_V1_MealsServiceNIOClient: Meals_V1_MealsServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the meals.v1.MealsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meals_V1_MealsServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? { get }

  func makeGetMealsCall(
    _ request: Meals_V1_GetMealsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse>

  func makeCreateMealCall(
    _ request: Meals_V1_CreateMealRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse>

  func makeDeleteMealCall(
    _ request: Meals_V1_DeleteMealRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_MealsServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meals_V1_MealsServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetMealsCall(
    _ request: Meals_V1_GetMealsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse> {
    return self.makeAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.getMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMealsInterceptors() ?? []
    )
  }

  internal func makeCreateMealCall(
    _ request: Meals_V1_CreateMealRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse> {
    return self.makeAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.createMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMealInterceptors() ?? []
    )
  }

  internal func makeDeleteMealCall(
    _ request: Meals_V1_DeleteMealRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse> {
    return self.makeAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.deleteMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMealInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_MealsServiceAsyncClientProtocol {
  internal func getMeals(
    _ request: Meals_V1_GetMealsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meals_V1_GetMealsResponse {
    return try await self.performAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.getMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetMealsInterceptors() ?? []
    )
  }

  internal func createMeal(
    _ request: Meals_V1_CreateMealRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meals_V1_CreateMealResponse {
    return try await self.performAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.createMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMealInterceptors() ?? []
    )
  }

  internal func deleteMeal(
    _ request: Meals_V1_DeleteMealRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meals_V1_DeleteMealResponse {
    return try await self.performAsyncUnaryCall(
      path: Meals_V1_MealsServiceClientMetadata.Methods.deleteMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteMealInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Meals_V1_MealsServiceAsyncClient: Meals_V1_MealsServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_MealsServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Meals_V1_MealsServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getMeals'.
  func makeGetMealsInterceptors() -> [ClientInterceptor<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse>]

  /// - Returns: Interceptors to use when invoking 'createMeal'.
  func makeCreateMealInterceptors() -> [ClientInterceptor<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteMeal'.
  func makeDeleteMealInterceptors() -> [ClientInterceptor<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse>]
}

internal enum Meals_V1_MealsServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MealsService",
    fullName: "meals.v1.MealsService",
    methods: [
      Meals_V1_MealsServiceClientMetadata.Methods.getMeals,
      Meals_V1_MealsServiceClientMetadata.Methods.createMeal,
      Meals_V1_MealsServiceClientMetadata.Methods.deleteMeal,
    ]
  )

  internal enum Methods {
    internal static let getMeals = GRPCMethodDescriptor(
      name: "GetMeals",
      path: "/meals.v1.MealsService/GetMeals",
      type: GRPCCallType.unary
    )

    internal static let createMeal = GRPCMethodDescriptor(
      name: "CreateMeal",
      path: "/meals.v1.MealsService/CreateMeal",
      type: GRPCCallType.unary
    )

    internal static let deleteMeal = GRPCMethodDescriptor(
      name: "DeleteMeal",
      path: "/meals.v1.MealsService/DeleteMeal",
      type: GRPCCallType.unary
    )
  }
}

/// Usage: instantiate `Meals_V1_PlannedMealsserviceClient`, then call methods of this protocol to make API calls.
internal protocol Meals_V1_PlannedMealsserviceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? { get }

  func getPlannedMeals(
    _ request: Meals_V1_GetPlannedMealsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse>

  func createPlannedMeal(
    _ request: Meals_V1_CreatePlannedMealRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse>
}

extension Meals_V1_PlannedMealsserviceClientProtocol {
  internal var serviceName: String {
    return "meals.v1.PlannedMealsservice"
  }

  /// Unary call to GetPlannedMeals
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPlannedMeals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPlannedMeals(
    _ request: Meals_V1_GetPlannedMealsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse> {
    return self.makeUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.getPlannedMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlannedMealsInterceptors() ?? []
    )
  }

  /// Unary call to CreatePlannedMeal
  ///
  /// - Parameters:
  ///   - request: Request to send to CreatePlannedMeal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createPlannedMeal(
    _ request: Meals_V1_CreatePlannedMealRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse> {
    return self.makeUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.createPlannedMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePlannedMealInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Meals_V1_PlannedMealsserviceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Meals_V1_PlannedMealsserviceNIOClient")
internal final class Meals_V1_PlannedMealsserviceClient: Meals_V1_PlannedMealsserviceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the meals.v1.PlannedMealsservice service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Meals_V1_PlannedMealsserviceNIOClient: Meals_V1_PlannedMealsserviceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol?

  /// Creates a client for the meals.v1.PlannedMealsservice service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meals_V1_PlannedMealsserviceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? { get }

  func makeGetPlannedMealsCall(
    _ request: Meals_V1_GetPlannedMealsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse>

  func makeCreatePlannedMealCall(
    _ request: Meals_V1_CreatePlannedMealRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_PlannedMealsserviceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meals_V1_PlannedMealsserviceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetPlannedMealsCall(
    _ request: Meals_V1_GetPlannedMealsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse> {
    return self.makeAsyncUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.getPlannedMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlannedMealsInterceptors() ?? []
    )
  }

  internal func makeCreatePlannedMealCall(
    _ request: Meals_V1_CreatePlannedMealRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse> {
    return self.makeAsyncUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.createPlannedMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePlannedMealInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_PlannedMealsserviceAsyncClientProtocol {
  internal func getPlannedMeals(
    _ request: Meals_V1_GetPlannedMealsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meals_V1_GetPlannedMealsResponse {
    return try await self.performAsyncUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.getPlannedMeals.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPlannedMealsInterceptors() ?? []
    )
  }

  internal func createPlannedMeal(
    _ request: Meals_V1_CreatePlannedMealRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Meals_V1_CreatePlannedMealResponse {
    return try await self.performAsyncUnaryCall(
      path: Meals_V1_PlannedMealsserviceClientMetadata.Methods.createPlannedMeal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreatePlannedMealInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Meals_V1_PlannedMealsserviceAsyncClient: Meals_V1_PlannedMealsserviceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Meals_V1_PlannedMealsserviceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getPlannedMeals'.
  func makeGetPlannedMealsInterceptors() -> [ClientInterceptor<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse>]

  /// - Returns: Interceptors to use when invoking 'createPlannedMeal'.
  func makeCreatePlannedMealInterceptors() -> [ClientInterceptor<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse>]
}

internal enum Meals_V1_PlannedMealsserviceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PlannedMealsservice",
    fullName: "meals.v1.PlannedMealsservice",
    methods: [
      Meals_V1_PlannedMealsserviceClientMetadata.Methods.getPlannedMeals,
      Meals_V1_PlannedMealsserviceClientMetadata.Methods.createPlannedMeal,
    ]
  )

  internal enum Methods {
    internal static let getPlannedMeals = GRPCMethodDescriptor(
      name: "GetPlannedMeals",
      path: "/meals.v1.PlannedMealsservice/GetPlannedMeals",
      type: GRPCCallType.unary
    )

    internal static let createPlannedMeal = GRPCMethodDescriptor(
      name: "CreatePlannedMeal",
      path: "/meals.v1.PlannedMealsservice/CreatePlannedMeal",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Meals_V1_MealsServiceProvider: CallHandlerProvider {
  var interceptors: Meals_V1_MealsServiceServerInterceptorFactoryProtocol? { get }

  func getMeals(request: Meals_V1_GetMealsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meals_V1_GetMealsResponse>

  func createMeal(request: Meals_V1_CreateMealRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meals_V1_CreateMealResponse>

  func deleteMeal(request: Meals_V1_DeleteMealRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meals_V1_DeleteMealResponse>
}

extension Meals_V1_MealsServiceProvider {
  internal var serviceName: Substring {
    return Meals_V1_MealsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMeals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_GetMealsRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_GetMealsResponse>(),
        interceptors: self.interceptors?.makeGetMealsInterceptors() ?? [],
        userFunction: self.getMeals(request:context:)
      )

    case "CreateMeal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_CreateMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_CreateMealResponse>(),
        interceptors: self.interceptors?.makeCreateMealInterceptors() ?? [],
        userFunction: self.createMeal(request:context:)
      )

    case "DeleteMeal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_DeleteMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_DeleteMealResponse>(),
        interceptors: self.interceptors?.makeDeleteMealInterceptors() ?? [],
        userFunction: self.deleteMeal(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meals_V1_MealsServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meals_V1_MealsServiceServerInterceptorFactoryProtocol? { get }

  func getMeals(
    request: Meals_V1_GetMealsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meals_V1_GetMealsResponse

  func createMeal(
    request: Meals_V1_CreateMealRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meals_V1_CreateMealResponse

  func deleteMeal(
    request: Meals_V1_DeleteMealRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meals_V1_DeleteMealResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_MealsServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meals_V1_MealsServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Meals_V1_MealsServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Meals_V1_MealsServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetMeals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_GetMealsRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_GetMealsResponse>(),
        interceptors: self.interceptors?.makeGetMealsInterceptors() ?? [],
        wrapping: { try await self.getMeals(request: $0, context: $1) }
      )

    case "CreateMeal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_CreateMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_CreateMealResponse>(),
        interceptors: self.interceptors?.makeCreateMealInterceptors() ?? [],
        wrapping: { try await self.createMeal(request: $0, context: $1) }
      )

    case "DeleteMeal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_DeleteMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_DeleteMealResponse>(),
        interceptors: self.interceptors?.makeDeleteMealInterceptors() ?? [],
        wrapping: { try await self.deleteMeal(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Meals_V1_MealsServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getMeals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetMealsInterceptors() -> [ServerInterceptor<Meals_V1_GetMealsRequest, Meals_V1_GetMealsResponse>]

  /// - Returns: Interceptors to use when handling 'createMeal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateMealInterceptors() -> [ServerInterceptor<Meals_V1_CreateMealRequest, Meals_V1_CreateMealResponse>]

  /// - Returns: Interceptors to use when handling 'deleteMeal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteMealInterceptors() -> [ServerInterceptor<Meals_V1_DeleteMealRequest, Meals_V1_DeleteMealResponse>]
}

internal enum Meals_V1_MealsServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "MealsService",
    fullName: "meals.v1.MealsService",
    methods: [
      Meals_V1_MealsServiceServerMetadata.Methods.getMeals,
      Meals_V1_MealsServiceServerMetadata.Methods.createMeal,
      Meals_V1_MealsServiceServerMetadata.Methods.deleteMeal,
    ]
  )

  internal enum Methods {
    internal static let getMeals = GRPCMethodDescriptor(
      name: "GetMeals",
      path: "/meals.v1.MealsService/GetMeals",
      type: GRPCCallType.unary
    )

    internal static let createMeal = GRPCMethodDescriptor(
      name: "CreateMeal",
      path: "/meals.v1.MealsService/CreateMeal",
      type: GRPCCallType.unary
    )

    internal static let deleteMeal = GRPCMethodDescriptor(
      name: "DeleteMeal",
      path: "/meals.v1.MealsService/DeleteMeal",
      type: GRPCCallType.unary
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol Meals_V1_PlannedMealsserviceProvider: CallHandlerProvider {
  var interceptors: Meals_V1_PlannedMealsserviceServerInterceptorFactoryProtocol? { get }

  func getPlannedMeals(request: Meals_V1_GetPlannedMealsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meals_V1_GetPlannedMealsResponse>

  func createPlannedMeal(request: Meals_V1_CreatePlannedMealRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Meals_V1_CreatePlannedMealResponse>
}

extension Meals_V1_PlannedMealsserviceProvider {
  internal var serviceName: Substring {
    return Meals_V1_PlannedMealsserviceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPlannedMeals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_GetPlannedMealsRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_GetPlannedMealsResponse>(),
        interceptors: self.interceptors?.makeGetPlannedMealsInterceptors() ?? [],
        userFunction: self.getPlannedMeals(request:context:)
      )

    case "CreatePlannedMeal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_CreatePlannedMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_CreatePlannedMealResponse>(),
        interceptors: self.interceptors?.makeCreatePlannedMealInterceptors() ?? [],
        userFunction: self.createPlannedMeal(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Meals_V1_PlannedMealsserviceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Meals_V1_PlannedMealsserviceServerInterceptorFactoryProtocol? { get }

  func getPlannedMeals(
    request: Meals_V1_GetPlannedMealsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meals_V1_GetPlannedMealsResponse

  func createPlannedMeal(
    request: Meals_V1_CreatePlannedMealRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Meals_V1_CreatePlannedMealResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Meals_V1_PlannedMealsserviceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Meals_V1_PlannedMealsserviceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Meals_V1_PlannedMealsserviceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Meals_V1_PlannedMealsserviceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPlannedMeals":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_GetPlannedMealsRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_GetPlannedMealsResponse>(),
        interceptors: self.interceptors?.makeGetPlannedMealsInterceptors() ?? [],
        wrapping: { try await self.getPlannedMeals(request: $0, context: $1) }
      )

    case "CreatePlannedMeal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Meals_V1_CreatePlannedMealRequest>(),
        responseSerializer: ProtobufSerializer<Meals_V1_CreatePlannedMealResponse>(),
        interceptors: self.interceptors?.makeCreatePlannedMealInterceptors() ?? [],
        wrapping: { try await self.createPlannedMeal(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Meals_V1_PlannedMealsserviceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getPlannedMeals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPlannedMealsInterceptors() -> [ServerInterceptor<Meals_V1_GetPlannedMealsRequest, Meals_V1_GetPlannedMealsResponse>]

  /// - Returns: Interceptors to use when handling 'createPlannedMeal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreatePlannedMealInterceptors() -> [ServerInterceptor<Meals_V1_CreatePlannedMealRequest, Meals_V1_CreatePlannedMealResponse>]
}

internal enum Meals_V1_PlannedMealsserviceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "PlannedMealsservice",
    fullName: "meals.v1.PlannedMealsservice",
    methods: [
      Meals_V1_PlannedMealsserviceServerMetadata.Methods.getPlannedMeals,
      Meals_V1_PlannedMealsserviceServerMetadata.Methods.createPlannedMeal,
    ]
  )

  internal enum Methods {
    internal static let getPlannedMeals = GRPCMethodDescriptor(
      name: "GetPlannedMeals",
      path: "/meals.v1.PlannedMealsservice/GetPlannedMeals",
      type: GRPCCallType.unary
    )

    internal static let createPlannedMeal = GRPCMethodDescriptor(
      name: "CreatePlannedMeal",
      path: "/meals.v1.PlannedMealsservice/CreatePlannedMeal",
      type: GRPCCallType.unary
    )
  }
}
