// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "proto/meals/v1/meals.proto" (package "meals.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message meals.v1.GetMealsRequest
 */
export interface GetMealsRequest {
}
/**
 * @generated from protobuf message meals.v1.GetMealsResponse
 */
export interface GetMealsResponse {
    /**
     * @generated from protobuf field: repeated meals.v1.meal meals = 1;
     */
    meals: meal[];
}
/**
 * @generated from protobuf message meals.v1.CreateMealRequest
 */
export interface CreateMealRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message meals.v1.CreateMealResponse
 */
export interface CreateMealResponse {
    /**
     * @generated from protobuf field: meals.v1.meal meal = 1;
     */
    meal?: meal;
}
/**
 * @generated from protobuf message meals.v1.DeleteMealRequest
 */
export interface DeleteMealRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message meals.v1.DeleteMealResponse
 */
export interface DeleteMealResponse {
}
/**
 * @generated from protobuf message meals.v1.meal
 */
export interface meal {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string created_by = 3;
     */
    createdBy: string;
}
/**
 * @generated from protobuf message meals.v1.GetPlannedMealsRequest
 */
export interface GetPlannedMealsRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp from = 1;
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp to = 2;
     */
    to?: Timestamp;
}
/**
 * @generated from protobuf message meals.v1.GetPlannedMealsResponse
 */
export interface GetPlannedMealsResponse {
    /**
     * @generated from protobuf field: repeated meals.v1.PlannedMeal plannedMeals = 1;
     */
    plannedMeals: PlannedMeal[];
}
/**
 * @generated from protobuf message meals.v1.CreatePlannedMealRequest
 */
export interface CreatePlannedMealRequest {
    /**
     * @generated from protobuf field: int64 mealId = 1;
     */
    mealId: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2;
     */
    date?: Timestamp;
}
/**
 * @generated from protobuf message meals.v1.CreatePlannedMealResponse
 */
export interface CreatePlannedMealResponse {
    /**
     * @generated from protobuf field: meals.v1.PlannedMeal plannedMeal = 1;
     */
    plannedMeal?: PlannedMeal;
}
/**
 * @generated from protobuf message meals.v1.PlannedMeal
 */
export interface PlannedMeal {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: meals.v1.meal meal = 3;
     */
    meal?: meal;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetMealsRequest$Type extends MessageType<GetMealsRequest> {
    constructor() {
        super("meals.v1.GetMealsRequest", []);
    }
    create(value?: PartialMessage<GetMealsRequest>): GetMealsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMealsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMealsRequest): GetMealsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMealsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.GetMealsRequest
 */
export const GetMealsRequest = new GetMealsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMealsResponse$Type extends MessageType<GetMealsResponse> {
    constructor() {
        super("meals.v1.GetMealsResponse", [
            { no: 1, name: "meals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => meal }
        ]);
    }
    create(value?: PartialMessage<GetMealsResponse>): GetMealsResponse {
        const message = { meals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMealsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMealsResponse): GetMealsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated meals.v1.meal meals */ 1:
                    message.meals.push(meal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMealsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated meals.v1.meal meals = 1; */
        for (let i = 0; i < message.meals.length; i++)
            meal.internalBinaryWrite(message.meals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.GetMealsResponse
 */
export const GetMealsResponse = new GetMealsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMealRequest$Type extends MessageType<CreateMealRequest> {
    constructor() {
        super("meals.v1.CreateMealRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateMealRequest>): CreateMealRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateMealRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMealRequest): CreateMealRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMealRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.CreateMealRequest
 */
export const CreateMealRequest = new CreateMealRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMealResponse$Type extends MessageType<CreateMealResponse> {
    constructor() {
        super("meals.v1.CreateMealResponse", [
            { no: 1, name: "meal", kind: "message", T: () => meal }
        ]);
    }
    create(value?: PartialMessage<CreateMealResponse>): CreateMealResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateMealResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMealResponse): CreateMealResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* meals.v1.meal meal */ 1:
                    message.meal = meal.internalBinaryRead(reader, reader.uint32(), options, message.meal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMealResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* meals.v1.meal meal = 1; */
        if (message.meal)
            meal.internalBinaryWrite(message.meal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.CreateMealResponse
 */
export const CreateMealResponse = new CreateMealResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMealRequest$Type extends MessageType<DeleteMealRequest> {
    constructor() {
        super("meals.v1.DeleteMealRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteMealRequest>): DeleteMealRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteMealRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMealRequest): DeleteMealRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteMealRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.DeleteMealRequest
 */
export const DeleteMealRequest = new DeleteMealRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteMealResponse$Type extends MessageType<DeleteMealResponse> {
    constructor() {
        super("meals.v1.DeleteMealResponse", []);
    }
    create(value?: PartialMessage<DeleteMealResponse>): DeleteMealResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteMealResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteMealResponse): DeleteMealResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteMealResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.DeleteMealResponse
 */
export const DeleteMealResponse = new DeleteMealResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class meal$Type extends MessageType<meal> {
    constructor() {
        super("meals.v1.meal", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "created_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<meal>): meal {
        const message = { id: 0n, name: "", createdBy: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<meal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: meal): meal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string created_by */ 3:
                    message.createdBy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: meal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string created_by = 3; */
        if (message.createdBy !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdBy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.meal
 */
export const meal = new meal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlannedMealsRequest$Type extends MessageType<GetPlannedMealsRequest> {
    constructor() {
        super("meals.v1.GetPlannedMealsRequest", [
            { no: 1, name: "from", kind: "message", T: () => Timestamp },
            { no: 2, name: "to", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetPlannedMealsRequest>): GetPlannedMealsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlannedMealsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlannedMealsRequest): GetPlannedMealsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp from */ 1:
                    message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* google.protobuf.Timestamp to */ 2:
                    message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlannedMealsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp from = 1; */
        if (message.from)
            Timestamp.internalBinaryWrite(message.from, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp to = 2; */
        if (message.to)
            Timestamp.internalBinaryWrite(message.to, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.GetPlannedMealsRequest
 */
export const GetPlannedMealsRequest = new GetPlannedMealsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlannedMealsResponse$Type extends MessageType<GetPlannedMealsResponse> {
    constructor() {
        super("meals.v1.GetPlannedMealsResponse", [
            { no: 1, name: "plannedMeals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PlannedMeal }
        ]);
    }
    create(value?: PartialMessage<GetPlannedMealsResponse>): GetPlannedMealsResponse {
        const message = { plannedMeals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlannedMealsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlannedMealsResponse): GetPlannedMealsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated meals.v1.PlannedMeal plannedMeals */ 1:
                    message.plannedMeals.push(PlannedMeal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlannedMealsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated meals.v1.PlannedMeal plannedMeals = 1; */
        for (let i = 0; i < message.plannedMeals.length; i++)
            PlannedMeal.internalBinaryWrite(message.plannedMeals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.GetPlannedMealsResponse
 */
export const GetPlannedMealsResponse = new GetPlannedMealsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePlannedMealRequest$Type extends MessageType<CreatePlannedMealRequest> {
    constructor() {
        super("meals.v1.CreatePlannedMealRequest", [
            { no: 1, name: "mealId", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CreatePlannedMealRequest>): CreatePlannedMealRequest {
        const message = { mealId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePlannedMealRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePlannedMealRequest): CreatePlannedMealRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 mealId */ 1:
                    message.mealId = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePlannedMealRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 mealId = 1; */
        if (message.mealId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.mealId);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.CreatePlannedMealRequest
 */
export const CreatePlannedMealRequest = new CreatePlannedMealRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePlannedMealResponse$Type extends MessageType<CreatePlannedMealResponse> {
    constructor() {
        super("meals.v1.CreatePlannedMealResponse", [
            { no: 1, name: "plannedMeal", kind: "message", T: () => PlannedMeal }
        ]);
    }
    create(value?: PartialMessage<CreatePlannedMealResponse>): CreatePlannedMealResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreatePlannedMealResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreatePlannedMealResponse): CreatePlannedMealResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* meals.v1.PlannedMeal plannedMeal */ 1:
                    message.plannedMeal = PlannedMeal.internalBinaryRead(reader, reader.uint32(), options, message.plannedMeal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreatePlannedMealResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* meals.v1.PlannedMeal plannedMeal = 1; */
        if (message.plannedMeal)
            PlannedMeal.internalBinaryWrite(message.plannedMeal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.CreatePlannedMealResponse
 */
export const CreatePlannedMealResponse = new CreatePlannedMealResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlannedMeal$Type extends MessageType<PlannedMeal> {
    constructor() {
        super("meals.v1.PlannedMeal", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp },
            { no: 3, name: "meal", kind: "message", T: () => meal }
        ]);
    }
    create(value?: PartialMessage<PlannedMeal>): PlannedMeal {
        const message = { id: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlannedMeal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlannedMeal): PlannedMeal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* meals.v1.meal meal */ 3:
                    message.meal = meal.internalBinaryRead(reader, reader.uint32(), options, message.meal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlannedMeal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* meals.v1.meal meal = 3; */
        if (message.meal)
            meal.internalBinaryWrite(message.meal, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meals.v1.PlannedMeal
 */
export const PlannedMeal = new PlannedMeal$Type();
/**
 * @generated ServiceType for protobuf service meals.v1.MealsService
 */
export const MealsService = new ServiceType("meals.v1.MealsService", [
    { name: "GetMeals", options: {}, I: GetMealsRequest, O: GetMealsResponse },
    { name: "CreateMeal", options: {}, I: CreateMealRequest, O: CreateMealResponse },
    { name: "DeleteMeal", options: {}, I: DeleteMealRequest, O: DeleteMealResponse }
]);
/**
 * @generated ServiceType for protobuf service meals.v1.PlannedMealsservice
 */
export const PlannedMealsservice = new ServiceType("meals.v1.PlannedMealsservice", [
    { name: "GetPlannedMeals", options: {}, I: GetPlannedMealsRequest, O: GetPlannedMealsResponse },
    { name: "CreatePlannedMeal", options: {}, I: CreatePlannedMealRequest, O: CreatePlannedMealResponse }
]);
