// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/meals/v1/meals.proto

package mealsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MealsService_GetMeals_FullMethodName   = "/meals.v1.MealsService/GetMeals"
	MealsService_CreateMeal_FullMethodName = "/meals.v1.MealsService/CreateMeal"
	MealsService_DeleteMeal_FullMethodName = "/meals.v1.MealsService/DeleteMeal"
)

// MealsServiceClient is the client API for MealsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MealsServiceClient interface {
	GetMeals(ctx context.Context, in *GetMealsRequest, opts ...grpc.CallOption) (*GetMealsResponse, error)
	CreateMeal(ctx context.Context, in *CreateMealRequest, opts ...grpc.CallOption) (*CreateMealResponse, error)
	DeleteMeal(ctx context.Context, in *DeleteMealRequest, opts ...grpc.CallOption) (*DeleteMealResponse, error)
}

type mealsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMealsServiceClient(cc grpc.ClientConnInterface) MealsServiceClient {
	return &mealsServiceClient{cc}
}

func (c *mealsServiceClient) GetMeals(ctx context.Context, in *GetMealsRequest, opts ...grpc.CallOption) (*GetMealsResponse, error) {
	out := new(GetMealsResponse)
	err := c.cc.Invoke(ctx, MealsService_GetMeals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) CreateMeal(ctx context.Context, in *CreateMealRequest, opts ...grpc.CallOption) (*CreateMealResponse, error) {
	out := new(CreateMealResponse)
	err := c.cc.Invoke(ctx, MealsService_CreateMeal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mealsServiceClient) DeleteMeal(ctx context.Context, in *DeleteMealRequest, opts ...grpc.CallOption) (*DeleteMealResponse, error) {
	out := new(DeleteMealResponse)
	err := c.cc.Invoke(ctx, MealsService_DeleteMeal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MealsServiceServer is the server API for MealsService service.
// All implementations must embed UnimplementedMealsServiceServer
// for forward compatibility
type MealsServiceServer interface {
	GetMeals(context.Context, *GetMealsRequest) (*GetMealsResponse, error)
	CreateMeal(context.Context, *CreateMealRequest) (*CreateMealResponse, error)
	DeleteMeal(context.Context, *DeleteMealRequest) (*DeleteMealResponse, error)
	mustEmbedUnimplementedMealsServiceServer()
}

// UnimplementedMealsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMealsServiceServer struct {
}

func (UnimplementedMealsServiceServer) GetMeals(context.Context, *GetMealsRequest) (*GetMealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedMealsServiceServer) CreateMeal(context.Context, *CreateMealRequest) (*CreateMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeal not implemented")
}
func (UnimplementedMealsServiceServer) DeleteMeal(context.Context, *DeleteMealRequest) (*DeleteMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeal not implemented")
}
func (UnimplementedMealsServiceServer) mustEmbedUnimplementedMealsServiceServer() {}

// UnsafeMealsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MealsServiceServer will
// result in compilation errors.
type UnsafeMealsServiceServer interface {
	mustEmbedUnimplementedMealsServiceServer()
}

func RegisterMealsServiceServer(s grpc.ServiceRegistrar, srv MealsServiceServer) {
	s.RegisterService(&MealsService_ServiceDesc, srv)
}

func _MealsService_GetMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).GetMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_GetMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).GetMeals(ctx, req.(*GetMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_CreateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).CreateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_CreateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).CreateMeal(ctx, req.(*CreateMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MealsService_DeleteMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MealsServiceServer).DeleteMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MealsService_DeleteMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MealsServiceServer).DeleteMeal(ctx, req.(*DeleteMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MealsService_ServiceDesc is the grpc.ServiceDesc for MealsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MealsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meals.v1.MealsService",
	HandlerType: (*MealsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMeals",
			Handler:    _MealsService_GetMeals_Handler,
		},
		{
			MethodName: "CreateMeal",
			Handler:    _MealsService_CreateMeal_Handler,
		},
		{
			MethodName: "DeleteMeal",
			Handler:    _MealsService_DeleteMeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/meals/v1/meals.proto",
}

const (
	PlannedMealsservice_GetPlannedMeals_FullMethodName   = "/meals.v1.PlannedMealsservice/GetPlannedMeals"
	PlannedMealsservice_CreatePlannedMeal_FullMethodName = "/meals.v1.PlannedMealsservice/CreatePlannedMeal"
)

// PlannedMealsserviceClient is the client API for PlannedMealsservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlannedMealsserviceClient interface {
	GetPlannedMeals(ctx context.Context, in *GetPlannedMealsRequest, opts ...grpc.CallOption) (*GetPlannedMealsResponse, error)
	CreatePlannedMeal(ctx context.Context, in *CreatePlannedMealRequest, opts ...grpc.CallOption) (*CreatePlannedMealResponse, error)
}

type plannedMealsserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlannedMealsserviceClient(cc grpc.ClientConnInterface) PlannedMealsserviceClient {
	return &plannedMealsserviceClient{cc}
}

func (c *plannedMealsserviceClient) GetPlannedMeals(ctx context.Context, in *GetPlannedMealsRequest, opts ...grpc.CallOption) (*GetPlannedMealsResponse, error) {
	out := new(GetPlannedMealsResponse)
	err := c.cc.Invoke(ctx, PlannedMealsservice_GetPlannedMeals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plannedMealsserviceClient) CreatePlannedMeal(ctx context.Context, in *CreatePlannedMealRequest, opts ...grpc.CallOption) (*CreatePlannedMealResponse, error) {
	out := new(CreatePlannedMealResponse)
	err := c.cc.Invoke(ctx, PlannedMealsservice_CreatePlannedMeal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlannedMealsserviceServer is the server API for PlannedMealsservice service.
// All implementations must embed UnimplementedPlannedMealsserviceServer
// for forward compatibility
type PlannedMealsserviceServer interface {
	GetPlannedMeals(context.Context, *GetPlannedMealsRequest) (*GetPlannedMealsResponse, error)
	CreatePlannedMeal(context.Context, *CreatePlannedMealRequest) (*CreatePlannedMealResponse, error)
	mustEmbedUnimplementedPlannedMealsserviceServer()
}

// UnimplementedPlannedMealsserviceServer must be embedded to have forward compatible implementations.
type UnimplementedPlannedMealsserviceServer struct {
}

func (UnimplementedPlannedMealsserviceServer) GetPlannedMeals(context.Context, *GetPlannedMealsRequest) (*GetPlannedMealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlannedMeals not implemented")
}
func (UnimplementedPlannedMealsserviceServer) CreatePlannedMeal(context.Context, *CreatePlannedMealRequest) (*CreatePlannedMealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlannedMeal not implemented")
}
func (UnimplementedPlannedMealsserviceServer) mustEmbedUnimplementedPlannedMealsserviceServer() {}

// UnsafePlannedMealsserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlannedMealsserviceServer will
// result in compilation errors.
type UnsafePlannedMealsserviceServer interface {
	mustEmbedUnimplementedPlannedMealsserviceServer()
}

func RegisterPlannedMealsserviceServer(s grpc.ServiceRegistrar, srv PlannedMealsserviceServer) {
	s.RegisterService(&PlannedMealsservice_ServiceDesc, srv)
}

func _PlannedMealsservice_GetPlannedMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlannedMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannedMealsserviceServer).GetPlannedMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlannedMealsservice_GetPlannedMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannedMealsserviceServer).GetPlannedMeals(ctx, req.(*GetPlannedMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlannedMealsservice_CreatePlannedMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlannedMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlannedMealsserviceServer).CreatePlannedMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlannedMealsservice_CreatePlannedMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlannedMealsserviceServer).CreatePlannedMeal(ctx, req.(*CreatePlannedMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlannedMealsservice_ServiceDesc is the grpc.ServiceDesc for PlannedMealsservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlannedMealsservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meals.v1.PlannedMealsservice",
	HandlerType: (*PlannedMealsserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlannedMeals",
			Handler:    _PlannedMealsservice_GetPlannedMeals_Handler,
		},
		{
			MethodName: "CreatePlannedMeal",
			Handler:    _PlannedMealsservice_CreatePlannedMeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/meals/v1/meals.proto",
}
